{"version":3,"sources":["components/ContactForm/ContactForm.module.scss","components/ContactList/ContactList.module.scss","components/Filter/Filter.module.scss","components/Title/title.module.scss","components/Title/Title.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","index.js"],"names":["module","exports","Title","title","className","s","ContactForm","onSubmit","useState","name","setName","number","setNumber","handleInputChange","currentTarget","value","reset","e","preventDefault","form","autoComplete","label","autoFocus","type","onChange","input","pattern","required","btn","Filter","ContactList","onDeleteContact","visibleContacts","list","map","id","item","box","onClick","App","JSON","parse","window","localStorage","getItem","contacts","setContacts","filter","setFilter","useEffect","setItem","stringify","contact","uuidv4","some","toLowerCase","alert","prevState","includes","trim","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23b71c43.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1trk7\",\"label\":\"ContactForm_label__1nn14\",\"input\":\"ContactForm_input__1W-yP\",\"number\":\"ContactForm_number__2mXLr\",\"btn\":\"ContactForm_btn__2AYns\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3R9HI\",\"item\":\"ContactList_item__DYalK\",\"box\":\"ContactList_box__17-FM\",\"name\":\"ContactList_name__39FOq\",\"number\":\"ContactList_number__2LJMo\",\"btn\":\"ContactList_btn__3A5xz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__Fo85X\",\"input\":\"Filter_input__2YSK0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"title_title__1dRwQ\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './title.module.scss';\n\nconst Title = ({ title }) => <h2 className={s.title}>{title}</h2>;\nexport default Title;\n\nTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactForm.module.scss';\n\nexport default function ContactForm({ onSubmit }) {\n  // в форме стейт нужен только при сабмите, поэтому храним в компоненте формы, а при сабмите отдаем на верх\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  // для всех инпутов ввод данных\n  const handleInputChange = ({ currentTarget: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleBtnSubmit = e => {\n    e.preventDefault();\n\n    onSubmit(name, number);\n\n    reset();\n    // e.target.reset(); //получить ссылку на форму и очистить методом от реакта\n  };\n\n  const reset = () => {\n    setNumber('');\n    setName('');\n  };\n\n  return (\n    <form onSubmit={handleBtnSubmit} className={s.form} autoComplete=\"off\">\n      <label className={s.label}>\n        Name\n        <input\n          autoFocus\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleInputChange}\n          className={s.input}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className={s.label}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleInputChange}\n          className={s.number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n\n      <button type=\"submit\" className={s.btn}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Filter.module.scss';\n\nconst Filter = ({ value, onChange }) => (\n  <label className={s.label}>\n    Find contacts by name\n    <input\n      type=\"text\"\n      name=\"filter\"\n      value={value}\n      onChange={onChange}\n      className={s.input}\n    ></input>\n  </label>\n);\nexport default Filter;\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactList.module.scss';\n\nconst ContactList = ({ onDeleteContact, visibleContacts }) => (\n  <ul className={s.list}>\n    {visibleContacts.map(({ id, name, number }) => (\n      <li key={id} className={s.item}>\n        <div className={s.box}>\n          <p className={s.name}>{name}: </p>\n          <p className={s.number}>{number}</p>\n          <button className={s.btn} onClick={() => onDeleteContact(id)}>\n            {/* <button className={s.btn} onClick={onDeleteContact} id={id}> */}\n            Delete\n          </button>\n        </div>\n      </li>\n    ))}\n  </ul>\n);\nexport default ContactList;\n\nContactList.propTypes = {\n  onDeleteContact: PropTypes.func.isRequired,\n  visibleContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport Title from './components/Title/Title';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\n// import filterContacts from './utils/filter-contact';\nimport ContactList from './components/ContactList/ContactList';\n\nimport './App.scss';\n\nexport default function App() {\n  const [contacts, setContacts] = useState(() =>\n    // const [contacts, setContacts] = useState(\n    JSON.parse(window.localStorage.getItem('contacts') ?? []),\n  );\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    // if (contacts === '') {\n    //   // if (!contacts) {\n    //   return;\n    // }\n\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addContact = (name, number) => {\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n\n    contacts.some(\n      // contacts.find(\n      contact =>\n        contact.name.toLowerCase() === name.toLowerCase() ||\n        contact.number === number,\n    )\n      ? alert(`${name} is already in contacts.`)\n      : setContacts(prevState => [...prevState, contact]);\n  };\n\n  const handleDeleteContact = id => {\n    // const handleDeleteContact = ({ target: { id } }) => {\n    setContacts(contacts.filter(contact => contact.id !== id));\n    // setContacts(prevState => prevState.filter(contact => contact.id !== id));\n  };\n\n  const handleChangeFilter = ({ currentTarget: { value } }) => {\n    setFilter(value);\n  };\n\n  // делает видимым тот контакт, который соответствует тексту поиска в инпуте\n  const visibleContacts = () =>\n    contacts.filter(\n      contact =>\n        contact.name.toLowerCase().includes(filter.trim().toLowerCase()) ||\n        contact.number.includes(filter.trim()),\n    );\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"visually_hidden\">Phonebook</h1>\n\n      <Title title=\"Phonebook\" />\n      <ContactForm onSubmit={addContact} />\n\n      <Title title=\"Contacts\" />\n      <Filter value={filter} onChange={handleChangeFilter} />\n      <ContactList\n        visibleContacts={visibleContacts()}\n        onDeleteContact={handleDeleteContact}\n      />\n    </div>\n  );\n}\n\n// ---------------------------------------------------\n// использовать именованные импорты и экспорты\n// import {Button} export {Button}\n\n// не нужно распылять пропсы\n\n// ключи должны быть стабильными, те не изменяться между разными рендерами\n// для ключей нельзя использовать uuid, потому что между разными рендерами key будет каждый раз новый. а для id объектов можно что бы оставить обеъкт один раз с этим айдишником\n\n// если коллекция неизменна, то можно использрвать индекс для ключей(напр при переборе)\n\n// библиотека для валидации форм react hook form\n// хуки для асинхрон запросов react query\n// кастомные хуки react-use\n\n// коллбек - функция отложенного вызова, передать ссылку на функцию\n// onClick(this.setState(index)) - при клике произойдет результат выполнения/вызова этой функции(undefined), но не вызовется сама функция! не коллбек.\n// onClick(() => {return this.setState(index)}) - ссылка на функцию, не вызывается. вызовется только тогда, когда по кнопке кликнут! коллбек.\n\n// -save сохраняет в dep\n// ---------------------------------------------------\n// поменяли this на замыкания\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}